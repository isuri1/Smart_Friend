/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package smartfriend.gui;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.Toolkit;
import java.util.ArrayList;

/**
 *
 * @author Meuru
 * 
 * This class is the basic GUI Form which will be displayed in the display panel
 */
public class GUIForm extends javax.swing.JFrame {

    private static final int GRAPHIC_DIVICE_NO = 1;
    private Dimension screenSize;
    
    /**
     * Creates new form GUIForm
     */
    private GUIPanel guiPanel;
    
//    private JFrame infoPanel;
//    private JPanel jPanel;
//    private Image image;

    public GUIForm() {
        initComponents();

        GraphicsDevice[] devices;

        devices = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();
        if (devices.length > 1) {
            screenSize = devices[GRAPHIC_DIVICE_NO].getDefaultConfiguration().getBounds().getSize();
        } else {
            screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        }
        setSize(screenSize);
        setLocation((int) Toolkit.getDefaultToolkit().getScreenSize().getWidth(), 0);

        //mouse = new Mouse(devices[GRAPHIC_DIVICE_NO]);

        Container c = getContentPane();
        c.setLayout(new BorderLayout());
        guiPanel = new GUIPanel(); // the webcam pictures and drums appear here
        c.add(guiPanel, BorderLayout.CENTER);

//        infoPanel = new JFrame("Info Panel");
//        infoPanel.getContentPane().setLayout(new BorderLayout());
////        jPanel = new JPanel() {
////            @Override
////            protected void paintComponent(Graphics g) {
////                g.drawImage(image, 0, 0, null);
////            }
////        };
//        infoPanel.getContentPane().add(jPanel, BorderLayout.CENTER);
//        infoPanel.setSize(640, 480);
//        infoPanel.setVisible(true);
//        infoPanel.setLayout(new BorderLayout());
    }

    public Graphics2D getGraphic() {
        return (Graphics2D) guiPanel.getGraphics();
    }

    public void wipeScreen() {
        guiPanel.setVisible(false);
    }

    public void resetScreen() {
        guiPanel.setVisible(true);
    }

    public void drawPointer(Point point) {
        guiPanel.drawPointer(point);
        //mouse.moveMousePointer((point));
        //System.out.println("Drawing points at x :" + point.x + "  y: " + point.y);
        //infoPanel.add(new JLabel(new ImageIcon("C:\\Users\\Meuru\\Desktop\\Untitled-1.png")));
        //image = transformPicture(mouse.getScreenShot());
        //jPanel.repaint();
    }

    public void drawPoints(ArrayList<Point> points) {
        if (points != null) {
            guiPanel.setHandPoints(points);
        }
    }

        
//    private Image transformPicture(BufferedImage img) {
//        javaxt.io.Image imageddImage = new javaxt.io.Image(img);
//        imageddImage.setCorners(sortedBoarderPoints[0].x, sortedBoarderPoints[0].y, //UL
//                sortedBoarderPoints[3].x, sortedBoarderPoints[3].y, //UR
//                sortedBoarderPoints[2].x, sortedBoarderPoints[2].y, //LR
//                sortedBoarderPoints[1].x, sortedBoarderPoints[1].y);         //LL
//        return imageddImage.getBufferedImage();
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private Point[] sortPoints(ArrayList<Point> points) {
        Point[] sortedPoints = new Point[4];
        sortedPoints[0] = points.get(0);
        for (Point pt : points) {
            if (Math.pow(sortedPoints[0].x, 2) + Math.pow(sortedPoints[0].x, 2)
                    > Math.pow(pt.x, 2) + Math.pow(pt.y, 2)) {
                sortedPoints[0] = pt;

            }
        }
        points.remove(sortedPoints[0]);
        sortedPoints[GRAPHIC_DIVICE_NO] = new Point(Integer.MAX_VALUE, Integer.MAX_VALUE);
        for (Point pt : points) {
            if (sortedPoints[GRAPHIC_DIVICE_NO].x > pt.x) {
                sortedPoints[GRAPHIC_DIVICE_NO] = pt;
            }
        }
        points.remove(sortedPoints[GRAPHIC_DIVICE_NO]);
        sortedPoints[3] = new Point(Integer.MAX_VALUE, Integer.MAX_VALUE);
        for (Point pt : points) {
            if (sortedPoints[3].y > pt.y) {
                sortedPoints[3] = pt;
            }
        }
        points.remove(sortedPoints[3]);
        sortedPoints[2] = points.get(0);
        return sortedPoints;
    }

    public Dimension getDisplyDimentions() {
        return screenSize;
    }
}
